(()=>{"use strict";const n=function(n,t,e){const i=n.canvas.width,o=n.canvas.height;return{x:i/14+t*(i/7),y:o/14+e*(o/7)}},t=["#FFEF9E","#D2FF9E","#9EFFA8","#9EFFE5","#9EDBFF","#9E9EFF","#DB9EFF","#FF9EE5","#FF9EA8","#FFD09E"],e=function(t,e,i){const{x:o,y:c}=i,r=t.canvas.width/7,s=t.canvas.height/7,{x:a,y:l}=n(t,e.x,e.y);let u,f;return"h"===e.orientation?(u=e.size*r,f=s):(u=r,f=e.size*s),o>=a&&o<=a+u&&c>=l&&c<=l+f},i=function(n,t,e){for(const i of e)if("h"==i.orientation){if(i.y===t&&n>=i.x&&n<i.x+i.size)return!0}else if(i.x===n&&t>=i.y&&t<i.y+i.size)return!0;return!1},o=function(t,e,i,o,c,r){const s=n(t,e.x,e.y),a=i-c,l=o-r;return{x:s.x+a,y:s.y+l}};var c=function(n,t,e,i){return new(e||(e=Promise))((function(o,c){function r(n){try{a(i.next(n))}catch(n){c(n)}}function s(n){try{a(i.throw(n))}catch(n){c(n)}}function a(n){var t;n.done?o(n.value):(t=n.value,t instanceof e?t:new e((function(n){n(t)}))).then(r,s)}a((i=i.apply(n,t||[])).next())}))};const r=document.getElementById("gridlockCanvas"),s=r.getContext("2d");let a,l,u=!1,f=-1,h=!1,y=0,x=0,d=0,v=0,m=0;function F(){return c(this,void 0,void 0,(function*(){let n;switch(m){case 0:n="levels/level01.json";break;case 1:n="levels/level11.json";break;case 2:n="levels/level21.json";break;default:n="levels/level31.json"}a=yield function(n){return c(this,void 0,void 0,(function*(){const t=yield fetch(n);return(yield t.json()).cars}))}(n),u=!1,f=-1}))}function w(){const{x:o,y:c}=function(){const n=r.getBoundingClientRect();return{x:Math.floor(y-n.x),y:Math.floor(x-n.y)}}();if(!u&&h)u=!0,f=function(n,t,i){for(let o=0;o<t.length;++o)if(e(n,t[o],i))return o;return-1}(s,a,{x:o,y:c}),d=o,v=c,f>=0&&(l=function(t,e,o){if("h"===e.orientation){let c=e.x;for(;c>0&&!i(c-1,e.y,o);)c-=1;let r=e.x;for(;r+e.size<6&&!i(r+e.size,e.y,o);)r+=1;2===e.y&&r===6-e.size&&(r=6);const s=n(t,c,e.y),a=n(t,r,e.y);return{maxX:a.x,maxY:a.y,minX:s.x,minY:s.y}}{let c=e.y;for(;c>0&&!i(e.x,c-1,o);)c-=1;let r=e.y;for(;r+e.size<6&&!i(e.x,r+e.size,o);)r+=1;const s=n(t,e.x,c),a=n(t,e.x,r);return{maxX:a.x,maxY:a.y,minX:s.x,minY:s.y}}}(s,a[f],a));else if(u&&!h){if(f>=0){const n=E(s,a[f],o,c,d,v),t=function(n,t){const e=n.canvas.width,i=n.canvas.height,o=6*e/7,c=6*i/7,r=e/14,s=i/14,a=(t.x-r)/o*6,l=(t.y-s)/c*6,u=Math.round(a),f=Math.round(l);return console.log(`${u},${f}`),{x:u,y:f}}(s,n);a[f].x=t.x,a[f].y=t.y}u=!1,f=-1}const g=E(s,a[f],o,c,d,v);if(0===f&&function(n,t,e){const i=n.canvas.width,o=i/7;return e.x+o*t.size>i}(s,a[f],g))return 3===m&&alert("You're purdy smart there einstein"),m=Math.min(3,m+1),void F().then((()=>{window.requestAnimationFrame(w)}));(function(n){n.fillStyle="#000000",n.fillRect(0,0,n.canvas.width,n.canvas.height)})(s),function(n){const t=n.canvas.width,e=n.canvas.height;n.fillStyle="#606060",n.fillRect(0,0,t,e)}(s),function(n){const t=n.canvas.width,e=n.canvas.height;n.fillStyle="#303030",n.fillRect(t/14,e/14,6*t/7,6*e/7),n.fillStyle="#606060";for(let i=0;i<6;++i)for(let o=0;o<6;++o){const c=t/14+3*t/56+i*t/7,r=e/14+3*e/56+o*e/7;n.fillRect(c,r,t/28,e/28)}const i=13*e/14,o=5*e/14;n.fillStyle="#303030",n.fillRect(i,o,t/14,e/7)}(s),function(e,i,o,c){i.forEach(((i,r)=>{!function(n,t,e,i){const o=n.canvas.width/7,c=n.canvas.height/7;let r,s;"h"===t.orientation?(s=c,r=o*t.size):(s=c*t.size,r=o),n.fillStyle=e,n.fillRect(i.x,i.y,r,s)}(e,i,0===r?"#ff0000":t[r],r===o?c:n(e,i.x,i.y))}))}(s,a,f,g),window.requestAnimationFrame(w)}function E(n,t,e,i,c,r){const s={x:0,y:0};if(u&&f>=0){const a=o(n,t,e,i,c,r);s.x=Math.max(l.minX,Math.min(l.maxX,a.x)),s.y=Math.max(l.minY,Math.min(l.maxY,a.y))}return s}function g(n){h=!(1&~n.buttons),y=n.clientX,x=n.clientY}document.addEventListener("mousedown",g),document.addEventListener("mousemove",g),document.addEventListener("mouseup",g),function(){return c(this,void 0,void 0,(function*(){yield F()}))}().then((()=>{window.requestAnimationFrame(w)})).catch((n=>{console.error("initialization error"),console.error(n)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,