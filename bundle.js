(()=>{"use strict";const n=function(n,e){return t=this,a=void 0,o=function*(){const t=yield fetch(e),a=yield t.arrayBuffer();return yield n.decodeAudioData(a)},new((i=void 0)||(i=Promise))((function(n,e){function r(n){try{s(o.next(n))}catch(n){e(n)}}function c(n){try{s(o.throw(n))}catch(n){e(n)}}function s(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(n){n(t)}))).then(r,c)}s((o=o.apply(t,a||[])).next())}));var t,a,i,o};const e=function(e,t){return a=this,i=void 0,r=function*(){const a=yield n(e,"sfx/pop7.wav"),i=yield n(e,"sfx/pop2.wav");t.drop=a,t.pickup=i},new((o=void 0)||(o=Promise))((function(n,e){function t(n){try{s(r.next(n))}catch(n){e(n)}}function c(n){try{s(r.throw(n))}catch(n){e(n)}}function s(e){var a;e.done?n(e.value):(a=e.value,a instanceof o?a:new o((function(n){n(a)}))).then(t,c)}s((r=r.apply(a,i||[])).next())}));var a,i,o,r},t=function(n,e,t){const a=n.canvas.width,i=n.canvas.height;return{x:a/14+e*(a/7),y:i/14+t*(i/7)}},a=function(n,e,t,a,i){const o=n.canvas.width/7,r=n.canvas.height/7;let c,s;"h"===e.orientation?(s=r,c=o*e.size):(s=r*e.size,c=o),i&&(c+=10,s+=10,a.x-=5,a.y-=5),n.fillStyle=t,n.fillRect(a.x,a.y,c,s)},i=["#FFEF9E","#D2FF9E","#9EFFA8","#9EFFE5","#9EDBFF","#9E9EFF","#DB9EFF","#FF9EE5","#FF9EA8","#FFD09E"],o="#ff0000",r=function(n,e){(function(n){n.fillStyle="#000000",n.fillRect(0,0,n.canvas.width,n.canvas.height)})(n),function(n){const e=n.canvas.width,t=n.canvas.height;n.fillStyle="#303030",n.fillRect(e/14,t/14,6*e/7,6*t/7),n.fillStyle="#606060";for(let a=0;a<6;++a)for(let i=0;i<6;++i){const o=e/14+3*e/56+a*e/7,r=t/14+3*t/56+i*t/7;n.fillRect(o,r,e/28,t/28)}const a=13*t/14,i=5*t/14;n.fillStyle="#303030",n.fillRect(a,i,e/14,t/7)}(n),"title"!==e.gamePhase&&function(n,e){if(e.cars.forEach(((r,c)=>{const s=0===c?o:i[c];if(c!==e.heldCarIndex){const e=t(n,r.x,r.y);if("incoming"===r.animation){if(r.animationFrame<0)return;const t=Math.max(0,(30-r.animationFrame)/30);e.y-=1/60*Math.pow(n.canvas.height*t,2)}else if("falling"===r.animation){if(r.animationFrame>30)return;const t=Math.max(0,Math.min(1,r.animationFrame/30));e.y+=1/60*Math.pow(n.canvas.height*t,2)}a(n,r,s,e,!1)}})),e.heldCarIndex>=0){const t=e.cars[e.heldCarIndex],r=0===e.heldCarIndex?o:i[e.heldCarIndex],c=Object.assign({},e.heldCarPosition);"falling"===t.animation&&(c.x+=5*t.animationFrame),a(n,t,r,c,!0)}}(n,e),function(n){const e=n.canvas.width,t=n.canvas.height,a=e/14,i=t/14,o=t/7,r=5*t/14,c=7*t/14;n.fillStyle="#606060",n.fillRect(0,0,a,t),n.fillRect(a,0,e-2*a,i),n.fillRect(a,t-i,e-2*a,i),n.fillRect(e-a,0,a,r),n.fillRect(e-a,r+o,a,c)}(n),function(n,e){if(e.heldCarIndex>=0){const t=e.cars[e.heldCarIndex],r=0===e.heldCarIndex?o:i[e.heldCarIndex],c=Object.assign({},e.heldCarPosition);"falling"===t.animation&&(c.x+=5*t.animationFrame),a(n,t,r,c,!0)}}(n,e),"title"===e.gamePhase&&function(n){const e=n.canvas.width,t=n.canvas.height;n.textAlign="center",n.textBaseline="middle",n.font='48px "Dosis", sans-serif',n.fillStyle="#ffffff",n.fillText("Click or Tap to Start",e/2,t/2)}(n)};const c=function(n){return e=this,t=void 0,i=function*(){const e=yield fetch(n);return(yield e.json()).cars},new((a=void 0)||(a=Promise))((function(n,o){function r(n){try{s(i.next(n))}catch(n){o(n)}}function c(n){try{s(i.throw(n))}catch(n){o(n)}}function s(e){var t;e.done?n(e.value):(t=e.value,t instanceof a?t:new a((function(n){n(t)}))).then(r,c)}s((i=i.apply(e,t||[])).next())}));var e,t,a,i};const s=function(n){return e=this,t=void 0,i=function*(){let e;switch(n.currentLevel){case 0:e="levels/level01.json";break;case 1:e="levels/level11.json";break;case 2:e="levels/level21.json";break;default:e="levels/level31.json"}n.cars=yield c(e),n.holdingCar=!1,n.heldCarIndex=-1,n.levelComplete=!1,"title"!==n.gamePhase&&(n.gamePhase="settingUpLevel"),n.cars.forEach(((n,e)=>{n.animationFrame=-10*e,n.animation="incoming"}))},new((a=void 0)||(a=Promise))((function(n,o){function r(n){try{s(i.next(n))}catch(n){o(n)}}function c(n){try{s(i.throw(n))}catch(n){o(n)}}function s(e){var t;e.done?n(e.value):(t=e.value,t instanceof a?t:new a((function(n){n(t)}))).then(r,c)}s((i=i.apply(e,t||[])).next())}));var e,t,a,i},l=function(n){return!n.cars.some((n=>n.animationFrame<30))},u=function(n,e,a){const{x:i,y:o}=a,r=n.canvas.width/7,c=n.canvas.height/7,{x:s,y:l}=t(n,e.x,e.y);let u,d;return"h"===e.orientation?(u=e.size*r,d=c):(u=r,d=e.size*c),i>=s&&i<=s+u&&o>=l&&o<=l+d},d=function(n,e,t){for(const a of t)if("h"==a.orientation){if(a.y===e&&n>=a.x&&n<a.x+a.size)return!0}else if(a.x===n&&e>=a.y&&e<a.y+a.size)return!0;return!1},f=function(n,e,a){const i=function(n,e,a){const i=e.cars[e.heldCarIndex],o=t(n,i.x,i.y),r=a.canvasMouse.x-e.holdOriginalCanvasMouse.x,c=a.canvasMouse.y-e.holdOriginalCanvasMouse.y;return{x:o.x+r,y:o.y+c}}(n,e,a);return{x:Math.max(e.dragBoundaries.minX,Math.min(e.dragBoundaries.maxX,i.x)),y:Math.max(e.dragBoundaries.minY,Math.min(e.dragBoundaries.maxY,i.y))}},h=function(n,e,a){if(!e.holdingCar&&a.mouseButtonPressed)e.holdingCar=!0,e.heldCarIndex=function(n,e,t){for(let a=0;a<e.cars.length;++a)if(u(n,e.cars[a],t.canvasMouse))return a;return-1}(n,e,a),e.holdOriginalCanvasMouse=Object.assign({},a.canvasMouse),e.heldCarIndex>=0&&(e.dragBoundaries=function(n,e){const a=e.cars[e.heldCarIndex],i=e.cars;if("h"===a.orientation){let e=a.x;for(;e>0&&!d(e-1,a.y,i);)e-=1;let o=a.x;for(;o+a.size<6&&!d(o+a.size,a.y,i);)o+=1;2===a.y&&o===6-a.size&&(o=6);const r=t(n,e,a.y),c=t(n,o,a.y);return{maxX:c.x,maxY:c.y,minX:r.x,minY:r.y}}{let e=a.y;for(;e>0&&!d(a.x,e-1,i);)e-=1;let o=a.y;for(;o+a.size<6&&!d(a.x,o+a.size,i);)o+=1;const r=t(n,a.x,e),c=t(n,a.x,o);return{maxX:c.x,maxY:c.y,minX:r.x,minY:r.y}}}(n,e),e.playPickupSound=!0);else if(e.holdingCar&&!a.mouseButtonPressed){if(e.heldCarIndex>=0){const t=function(n,e){const t=n.canvas.width,a=n.canvas.height,i=6*t/7,o=6*a/7,r=t/14,c=a/14,s=(e.x-r)/i*6,l=(e.y-c)/o*6,u=Math.round(s),d=Math.round(l);return console.log(`${u},${d}`),{x:u,y:d}}(n,f(n,e,a));e.cars[e.heldCarIndex].x=t.x,e.cars[e.heldCarIndex].y=t.y,e.playDropSound=!0}e.holdingCar=!1,e.heldCarIndex=-1}},m=function(n){n.cars.forEach((e=>{++e.animationFrame,"incoming"===e.animation&&30===e.animationFrame?n.playDropSound=!0:"falling"===e.animation&&1===e.animationFrame&&(n.playPickupSound=!0)}))},v=function(n,e,t){"settingUpLevel"===e.gamePhase?(m(e),l(e)&&function(n){n.gamePhase="play",n.cars.forEach((n=>{n.animation="none",n.animationFrame=0}))}(e)):"play"===e.gamePhase?(h(n,e,t),function(n,e,t){e.holdingCar&&e.heldCarIndex>=0&&(e.heldCarPosition=f(n,e,t))}(n,e,t),function(n,e){if(0===e.heldCarIndex&&function(n,e,t){const a=n.canvas.width,i=a/7;return t.x+i*e.size>a}(n,e.cars[e.heldCarIndex],e.heldCarPosition))3===e.currentLevel&&alert("You're purdy smart there einstein"),e.gamePhase="tearingDownLevel",e.cars.forEach(((n,e)=>{n.animation="falling",n.animationFrame=-10*e}))}(n,e)):"tearingDownLevel"===e.gamePhase&&(m(e),l(e)&&(e.levelComplete=!0,e.currentLevel=e.currentLevel+1))},x=function(n,e){const t=n.createBufferSource();t.buffer=e,t.connect(n.destination),t.start()};const y=document.getElementById("gridlockCanvas"),g=y.getContext("2d"),p=new AudioContext,C={drop:void 0,pickup:void 0};let w=0,F=0;const P={cars:[],currentLevel:0,dragBoundaries:{maxX:0,maxY:0,minX:0,minY:0},gamePhase:"title",heldCarIndex:-1,heldCarPosition:{x:0,y:0},holdingCar:!1,holdOriginalCanvasMouse:{x:0,y:0},levelComplete:!1,playDropSound:!1,playPickupSound:!1},E={canvasMouse:{x:0,y:0},mouseButtonPressed:!1};function I(){E.canvasMouse=function(){const n=y.getBoundingClientRect();return{x:Math.floor(w-n.x),y:Math.floor(F-n.y)}}(),v(g,P,E),P.levelComplete?s(P).then((()=>{window.requestAnimationFrame(I)})):(r(g,P),function(n,e,t){e.playDropSound&&t.drop&&x(n,t.drop),e.playPickupSound&&t.pickup&&x(n,t.pickup),e.playDropSound=!1,e.playPickupSound=!1}(p,P,C),window.requestAnimationFrame(I))}function M(n){E.mouseButtonPressed=!(1&~n.buttons),w=n.clientX,F=n.clientY}function B(n){E.mouseButtonPressed=!1}document.addEventListener("mousedown",M),document.addEventListener("mousemove",M),document.addEventListener("mouseup",M),y.addEventListener("touchstart",(function(n){E.mouseButtonPressed=!0,w=n.changedTouches[0].clientX,F=n.changedTouches[0].clientY})),y.addEventListener("touchmove",(function(n){n.preventDefault(),w=n.changedTouches[0].clientX,F=n.changedTouches[0].clientY})),y.addEventListener("touchend",B),y.addEventListener("touchcancel",B),y.addEventListener("click",(function(n){n.preventDefault(),"title"===P.gamePhase&&(P.gamePhase="settingUpLevel")})),function(){return n=this,t=void 0,i=function*(){yield e(p,C),yield s(P)},new((a=void 0)||(a=Promise))((function(e,o){function r(n){try{s(i.next(n))}catch(n){o(n)}}function c(n){try{s(i.throw(n))}catch(n){o(n)}}function s(n){var t;n.done?e(n.value):(t=n.value,t instanceof a?t:new a((function(n){n(t)}))).then(r,c)}s((i=i.apply(n,t||[])).next())}));var n,t,a,i}().then((()=>{window.requestAnimationFrame(I)})).catch((n=>{console.error("initialization error"),console.error(n)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,